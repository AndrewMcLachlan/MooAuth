// This file is auto-generated by @hey-api/openapi-ts

export const ApplicationSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        logoUrl: {
            type: 'string',
            nullable: true
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Permission'
            }
        },
        description: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const ConnectorTypeSchema = {
    enum: ['Entra', 'Auth0']
} as const;

export const ConnectorTypeEntrySchema = {
    required: ['name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        logoUrl: {
            type: 'string',
            format: 'uri',
            nullable: true
        }
    }
} as const;

export const CreateApplicationSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        logoUrl: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const CreateEntraConnectorSchema = {
    required: ['name', 'config', 'clientId', 'clientSecret'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        config: {
            '$ref': '#/components/schemas/EntraConfig'
        },
        clientId: {
            type: 'string'
        },
        clientSecret: {
            type: 'string'
        },
        audience: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const CreatePermissionSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        description: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const CreateRoleSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        description: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const EntraConfigSchema = {
    required: ['tenantId'],
    type: 'object',
    properties: {
        tenantId: {
            type: 'string',
            format: 'uuid'
        }
    },
    nullable: true
} as const;

export const EntraConnectorSchema = {
    required: ['id', 'config', 'slug', 'clientId', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        config: {
            '$ref': '#/components/schemas/EntraConfig'
        },
        slug: {
            type: 'string'
        },
        clientId: {
            type: 'string'
        },
        audience: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const PermissionSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        description: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const Permission2Schema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const ProblemDetailsSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        detail: {
            type: 'string',
            nullable: true
        },
        instance: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const RoleSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        description: {
            type: 'string',
            nullable: true
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Permission2'
            }
        },
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const SimpleApplicationSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        permissions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SimplePermission'
            }
        }
    }
} as const;

export const SimpleConnectorSchema = {
    required: ['id', 'name', 'type', 'clientId'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/ConnectorType'
        },
        clientId: {
            type: 'string'
        }
    }
} as const;

export const SimplePermissionSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const UserSchema = {
    required: ['id', 'emailAddress', 'firstName', 'lastName'],
    type: 'object',
    properties: {
        id: {},
        emailAddress: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        }
    }
} as const;