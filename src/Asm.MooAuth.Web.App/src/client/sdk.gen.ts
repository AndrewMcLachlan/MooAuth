// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetAllApplicationsData, GetAllApplicationsResponse, CreateApplicationData, CreateApplicationResponse, DeleteApplicationData, DeleteApplicationResponse, DeleteApplicationError, GetApplicationData, GetApplicationResponse, GetApplicationError, UpdateApplicationData, UpdateApplicationResponse, UpdateApplicationError, GetPermissionListData, GetPermissionListResponse, DeletePermissionData, DeletePermissionResponse, DeletePermissionError, GetPermissionData, GetPermissionResponse, GetPermissionError, UpdatePermissionData, UpdatePermissionResponse, UpdatePermissionError, CreatePermissionData, CreatePermissionResponse, GetAllConnectorsData, GetAllConnectorsResponse, GetAvailableConnectorTypesData, GetAvailableConnectorTypesResponse, DeleteConnectorData, DeleteConnectorResponse, DeleteConnectorError, GetEntraConnectorData, GetEntraConnectorResponse, GetEntraConnectorError, UpdateEntraConnectorData, UpdateEntraConnectorResponse, UpdateEntraConnectorError, CreateEntraConnectorData, CreateEntraConnectorResponse, GetAllRolesData, GetAllRolesResponse, GetAllRolesError, CreateRoleData, CreateRoleResponse, DeleteRoleData, DeleteRoleResponse, DeleteRoleError, GetRoleData, GetRoleResponse, GetRoleError, UpdateRoleData, UpdateRoleResponse, UpdateRoleError, RemoveRoleData, RemoveRoleResponse, RemoveRoleError, AddPermissionData, AddPermissionError, GetUserData, GetUserResponse } from './types.gen';

export const client = createClient(createConfig());

export const getAllApplications = <ThrowOnError extends boolean = false>(options?: Options<GetAllApplicationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllApplicationsResponse, unknown, ThrowOnError>({
        url: '/api/applications',
        ...options
    });
};

export const createApplication = <ThrowOnError extends boolean = false>(options: Options<CreateApplicationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateApplicationResponse, unknown, ThrowOnError>({
        url: '/api/applications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApplication = <ThrowOnError extends boolean = false>(options: Options<DeleteApplicationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApplicationResponse, DeleteApplicationError, ThrowOnError>({
        url: '/api/applications/{id}',
        ...options
    });
};

export const getApplication = <ThrowOnError extends boolean = false>(options: Options<GetApplicationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApplicationResponse, GetApplicationError, ThrowOnError>({
        url: '/api/applications/{id}',
        ...options
    });
};

export const updateApplication = <ThrowOnError extends boolean = false>(options: Options<UpdateApplicationData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateApplicationResponse, UpdateApplicationError, ThrowOnError>({
        url: '/api/applications/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getPermissionList = <ThrowOnError extends boolean = false>(options?: Options<GetPermissionListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPermissionListResponse, unknown, ThrowOnError>({
        url: '/api/applications/permissions',
        ...options
    });
};

export const deletePermission = <ThrowOnError extends boolean = false>(options: Options<DeletePermissionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePermissionResponse, DeletePermissionError, ThrowOnError>({
        url: '/api/applications/{applicationId}/permissions/{id}',
        ...options
    });
};

export const getPermission = <ThrowOnError extends boolean = false>(options: Options<GetPermissionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPermissionResponse, GetPermissionError, ThrowOnError>({
        url: '/api/applications/{applicationId}/permissions/{id}',
        ...options
    });
};

export const updatePermission = <ThrowOnError extends boolean = false>(options: Options<UpdatePermissionData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdatePermissionResponse, UpdatePermissionError, ThrowOnError>({
        url: '/api/applications/{applicationId}/permissions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createPermission = <ThrowOnError extends boolean = false>(options: Options<CreatePermissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePermissionResponse, unknown, ThrowOnError>({
        url: '/api/applications/{applicationId}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllConnectors = <ThrowOnError extends boolean = false>(options?: Options<GetAllConnectorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllConnectorsResponse, unknown, ThrowOnError>({
        url: '/api/connectors',
        ...options
    });
};

export const getAvailableConnectorTypes = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableConnectorTypesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAvailableConnectorTypesResponse, unknown, ThrowOnError>({
        url: '/api/connectors/available',
        ...options
    });
};

export const deleteConnector = <ThrowOnError extends boolean = false>(options: Options<DeleteConnectorData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteConnectorResponse, DeleteConnectorError, ThrowOnError>({
        url: '/api/connectors/{id}',
        ...options
    });
};

export const getEntraConnector = <ThrowOnError extends boolean = false>(options: Options<GetEntraConnectorData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEntraConnectorResponse, GetEntraConnectorError, ThrowOnError>({
        url: '/api/connectors/entra/{id}',
        ...options
    });
};

export const updateEntraConnector = <ThrowOnError extends boolean = false>(options: Options<UpdateEntraConnectorData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateEntraConnectorResponse, UpdateEntraConnectorError, ThrowOnError>({
        url: '/api/connectors/entra/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const createEntraConnector = <ThrowOnError extends boolean = false>(options: Options<CreateEntraConnectorData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateEntraConnectorResponse, unknown, ThrowOnError>({
        url: '/api/connectors/entra',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getAllRoles = <ThrowOnError extends boolean = false>(options?: Options<GetAllRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllRolesResponse, GetAllRolesError, ThrowOnError>({
        url: '/api/roles',
        ...options
    });
};

export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateRoleResponse, unknown, ThrowOnError>({
        url: '/api/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
        url: '/api/roles/{id}',
        ...options
    });
};

export const getRole = <ThrowOnError extends boolean = false>(options: Options<GetRoleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRoleResponse, GetRoleError, ThrowOnError>({
        url: '/api/roles/{id}',
        ...options
    });
};

export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
        url: '/api/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const removeRole = <ThrowOnError extends boolean = false>(options: Options<RemoveRoleData, ThrowOnError>) => {
    return (options?.client ?? client).delete<RemoveRoleResponse, RemoveRoleError, ThrowOnError>({
        url: '/api/roles/{roleId}/permissions/{permissionId}',
        ...options
    });
};

export const addPermission = <ThrowOnError extends boolean = false>(options: Options<AddPermissionData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, AddPermissionError, ThrowOnError>({
        url: '/api/roles/{roleId}/permissions/{permissionId}',
        ...options
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponse, unknown, ThrowOnError>({
        url: '/api/users/me',
        ...options
    });
};