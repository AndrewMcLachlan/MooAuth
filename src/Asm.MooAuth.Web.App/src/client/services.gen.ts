// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetAllApplicationsError, GetAllApplicationsResponse, CreateApplicationData, CreateApplicationError, CreateApplicationResponse, GetApplicationData, GetApplicationError, GetApplicationResponse, UpdateApplicationData, UpdateApplicationError, UpdateApplicationResponse, DeleteApplicationData, DeleteApplicationError, DeleteApplicationResponse, GetPermissionListError, GetPermissionListResponse, GetPermissionData, GetPermissionError, GetPermissionResponse, UpdatePermissionData, UpdatePermissionError, UpdatePermissionResponse, DeletePermissionData, DeletePermissionError, DeletePermissionResponse, CreatePermissionData, CreatePermissionError, CreatePermissionResponse, GetAllRolesError, GetAllRolesResponse, CreateRoleData, CreateRoleError, CreateRoleResponse, GetRoleData, GetRoleError, GetRoleResponse, UpdateRoleData, UpdateRoleError, UpdateRoleResponse, DeleteRoleData, DeleteRoleError, DeleteRoleResponse, AddPermissionData, AddPermissionError, AddPermissionResponse, RemoveRoleData, RemoveRoleError, RemoveRoleResponse, GetUserError, GetUserResponse } from './types.gen';

export const client = createClient(createConfig());

export const getAllApplications = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllApplicationsResponse, GetAllApplicationsError, ThrowOnError>({
    ...options,
    url: '/api/applications'
}); };

export const createApplication = <ThrowOnError extends boolean = false>(options: Options<CreateApplicationData, ThrowOnError>) => { return (options?.client ?? client).post<CreateApplicationResponse, CreateApplicationError, ThrowOnError>({
    ...options,
    url: '/api/applications'
}); };

export const getApplication = <ThrowOnError extends boolean = false>(options: Options<GetApplicationData, ThrowOnError>) => { return (options?.client ?? client).get<GetApplicationResponse, GetApplicationError, ThrowOnError>({
    ...options,
    url: '/api/applications/{id}'
}); };

export const updateApplication = <ThrowOnError extends boolean = false>(options: Options<UpdateApplicationData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateApplicationResponse, UpdateApplicationError, ThrowOnError>({
    ...options,
    url: '/api/applications/{id}'
}); };

export const deleteApplication = <ThrowOnError extends boolean = false>(options: Options<DeleteApplicationData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteApplicationResponse, DeleteApplicationError, ThrowOnError>({
    ...options,
    url: '/api/applications/{id}'
}); };

export const getPermissionList = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetPermissionListResponse, GetPermissionListError, ThrowOnError>({
    ...options,
    url: '/api/applications/permissions'
}); };

export const getPermission = <ThrowOnError extends boolean = false>(options: Options<GetPermissionData, ThrowOnError>) => { return (options?.client ?? client).get<GetPermissionResponse, GetPermissionError, ThrowOnError>({
    ...options,
    url: '/api/applications/{applicationId}/permissions/{id}'
}); };

export const updatePermission = <ThrowOnError extends boolean = false>(options: Options<UpdatePermissionData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdatePermissionResponse, UpdatePermissionError, ThrowOnError>({
    ...options,
    url: '/api/applications/{applicationId}/permissions/{id}'
}); };

export const deletePermission = <ThrowOnError extends boolean = false>(options: Options<DeletePermissionData, ThrowOnError>) => { return (options?.client ?? client).delete<DeletePermissionResponse, DeletePermissionError, ThrowOnError>({
    ...options,
    url: '/api/applications/{applicationId}/permissions/{id}'
}); };

export const createPermission = <ThrowOnError extends boolean = false>(options: Options<CreatePermissionData, ThrowOnError>) => { return (options?.client ?? client).post<CreatePermissionResponse, CreatePermissionError, ThrowOnError>({
    ...options,
    url: '/api/applications/{applicationId}/permissions'
}); };

export const getAllRoles = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllRolesResponse, GetAllRolesError, ThrowOnError>({
    ...options,
    url: '/api/roles'
}); };

export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => { return (options?.client ?? client).post<CreateRoleResponse, CreateRoleError, ThrowOnError>({
    ...options,
    url: '/api/roles'
}); };

export const getRole = <ThrowOnError extends boolean = false>(options: Options<GetRoleData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoleResponse, GetRoleError, ThrowOnError>({
    ...options,
    url: '/api/roles/{id}'
}); };

export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateRoleResponse, UpdateRoleError, ThrowOnError>({
    ...options,
    url: '/api/roles/{id}'
}); };

export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteRoleResponse, DeleteRoleError, ThrowOnError>({
    ...options,
    url: '/api/roles/{id}'
}); };

export const addPermission = <ThrowOnError extends boolean = false>(options: Options<AddPermissionData, ThrowOnError>) => { return (options?.client ?? client).put<AddPermissionResponse, AddPermissionError, ThrowOnError>({
    ...options,
    url: '/api/roles/{roleId}/permissions/{permissionId}'
}); };

export const removeRole = <ThrowOnError extends boolean = false>(options: Options<RemoveRoleData, ThrowOnError>) => { return (options?.client ?? client).delete<RemoveRoleResponse, RemoveRoleError, ThrowOnError>({
    ...options,
    url: '/api/roles/{roleId}/permissions/{permissionId}'
}); };

export const getUser = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
    ...options,
    url: '/api/users/me'
}); };